name: Deploy

on:
  push:
    branches:
      - staging
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Create wrangler.toml
        run: |
          cat >wrangler.toml << ENDOFFILE
              #:schema node_modules/wrangler/config-schema.json
              name = "lintrack"
              compatibility_date = "2024-09-23"
              compatibility_flags = ["nodejs_compat_v2"]
              main = "dist/_worker.js/index.js"

              # ================== production environment ====================================
              [env.prod]
              name = "lintrack"

              [[env.prod.d1_databases]]
              binding = "DB"
              database_name = "${{ vars.main_db }}"
              database_id = "${{ vars.main_db_id }}"

              # ================== staging environment =======================================
              [env.staging]
              name = "lintrack-staging"

              [[env.staging.d1_databases]]
              binding = "DB"
              database_name = "${{ vars.staging_db }}"
              database_id = "${{ vars.staging_db_id }}"

              # Workers Logs
              # Docs: https://developers.cloudflare.com/workers/observability/logs/workers-logs/
              # Configuration: https://developers.cloudflare.com/workers/observability/logs/workers-logs/#enable-workers-logs
              [observability]
              enabled = true
          ENDOFFILE

      - name: Build
        run: pnpm build

      - name: Database Migrate
        run: yes | pnpm wrangler d1 migrations apply ${{ vars.staging_db }} --env ${{ vars.staging }} --remote
        env:
            CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: "deploy --env ${{ vars.staging }}"
